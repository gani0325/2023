# 컨베이어 벨트 위의 로봇
# 길이가 N인 컨베이어 벨트
# 길이가 2N인 벨트가 이 컨베이어 벨트를 위아래로 감싸며 돌고 있다
#     벨트는 길이 1 간격으로 2N개의 칸으로 나뉘어져 있으며, 번호가 매겨져 있다

# 벨트가 한 칸 회전하면 1번부터 2N-1번까지의 칸은 다음 번호의 칸이 있는 위치로 이동
#     2N번 칸은 1번 칸의 위치로 이동
# i번 칸의 내구도는 Ai
#    1번 칸이 있는 위치를 "올리는 위치", N번 칸이 있는 위치를 "내리는 위치"

# 컨베이어 벨트에 박스 모양 로봇을 하나씩 올리려고 한다
# 로봇은 올리는 위치에만 올릴 수 있다
# 언제든지 로봇이 내리는 위치에 도달하면 그 즉시 내린다
# 로봇은 컨베이어 벨트 위에서 스스로 이동할 수 있다
#    로봇을 올리는 위치에 올리거나 로봇이 어떤 칸으로 이동하면 그 칸의 내구도는 즉시 1만큼 감소

# 컨베이어 벨트를 이용해 로봇들을 건너편으로 옮기려고 한다
# 로봇을 옮기는 과정
# 1) 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전
# 2) 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동
#     만약 이동할 수 없다면 가만히 있는다
#     로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도가 1 이상 남아 있어야 한다
# 3) 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다
# 4) 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료
#    그렇지 않다면 1번으로 돌아간다

# 종료되었을 때 몇 번째 단계가 진행 중이었는지 구해보자
#    가장 처음 수행되는 단계는 1번째 단계

# 첫째 줄에 N, K
# 둘째 줄에는 A1, A2, ..., A2N

from collections import deque

# 길이가 N인 컨베이어 벨트, 내구도가 0인 칸의 개수가 K개
n, k = map(int, input().split())
queue = deque()

belt = list(map(int, input().split()))
# 컨베이어 벨트의 내구성을 저장할 큐
queue.extend(belt)
# 로봇의 정보를 저장할 큐
robot = deque([0] * n)

cnt = 0
while True:
    cnt += 1
    # 1. 벨트 회전
    queue.rotate(1)
    robot.rotate(1)

    # 로봇이 내려가는 부분이니 0
    robot[-1] = 0

    # 2. 벨트위에서 로봇 이동
    if 1 in robot:
        for i in range(n-1, 0, -1): # 끝에서부터 확인
            if not robot[i] and robot[i-1] and queue[i] > 0:
                # 현재 칸 로봇이 없고,
                # 앞 칸의 벨트 위에 로봇이 있고,
                # 현재 칸 내구도가 1이상일 때 옮기기
                queue[i] -= 1  # 내구도 깍고
                robot[i] = 1 # 로봇 O -> 1
                robot[i-1] = 0

    # 내리는 위치에 로봇이 있다면 내린다
    robot[-1] = 0

    # 3. 올리는 위치에 있는 칸의 내구도가 0이 아니라면 올리는 위치에 로봇 올린다
    if queue[0] > 0 and not robot[0]:
        queue[0] -= 1
        robot[0] = 1
    # 4. 내구도가 0인 칸의 개수가 K개 이상이면 과정 종료
    if queue.count(0) >= k:
        print(cnt)
        break
